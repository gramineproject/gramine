# Memcached manifest file example

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/memcached"

loader.log_level = "{{ log_level }}"

# the only dependency is libevent.so, found under `/usr/{{ arch_libdir }}`
loader.env.LD_LIBRARY_PATH = "/lib:/usr/{{ arch_libdir }}"

# Gramine by default reports the root user (uid = 0) to applications. This default behavior forces
# Memcached to attempt to drop privileges and assume some non-privileged user ID via setuid(), which
# is meaningless in Gramine. Instead, we set up a dummy user (uid = 1000); this is irrelevant for
# consequent Memcached execution anyway.
loader.uid = 1000
loader.gid = 1000

sys.enable_sigterm_injection = true

fs.mounts = [
  { path = "/memcached", uri = "file:memcached" },
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/usr/{{ arch_libdir }}", uri = "file:/usr/{{ arch_libdir }}" },
]

sgx.debug = true
sgx.nonpie_binary = true
sgx.max_threads = 16

# Memcached does not fail explicitly when enclave memory is exhausted. Instead, Memcached goes into
# infinite loop without a listening socket. You can trigger this incorrect behavior by increasing
# the number of threads to 12 (each thread requires 128MB of memory): `memcached -t 12`. This is an
# issue in Memcached source code, not related to Gramine.
sgx.enclave_size = "1024M"

sgx.trusted_files = [
  "file:memcached",
  "file:{{ gramine.runtimedir() }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:{{ gramine.libos }}",
]
