# This is a general manifest template for running SQLite.

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ execdir }}/sqlite3"

loader.log_level = "{{ log_level }}"

loader.argv = ["sqlite3", "/db/test.db"]

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"
loader.env.PATH = "{{ execdir }}"
# Set HOME to suppress "warning: cannot find home directory; cannot read ~/.sqliterc"
loader.env.HOME = "/"

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "{{ execdir }}/sqlite3", uri = "file:{{ execdir }}/sqlite3" },

  # SQLite creates several helper files for the DB, so we specify a path instead of a single file
  { type = "encrypted", path = "/db/", uri = "file:db/", key_name = "default" },
]

# Unfortunately, non-SGX Gramine cannot use special keys such as "_sgx_mrenclave", so for this
# example to work on both non-SGX and SGX versions we hardcode a dummy key. In SGX production case,
# it is recommended to remove this insecure key and instead use "_sgx_mrenclave"/"_sgx_mrsigner".
fs.insecure__keys.default = "ffeeddccbbaa99887766554433221100"

sgx.debug = true
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
sgx.enclave_size = "256M"
sgx.max_threads = 4

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ execdir }}/sqlite3",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:scripts/",
]
