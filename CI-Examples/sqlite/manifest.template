# This is a general manifest template for running SQLite.

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ execdir }}/sqlite3"

loader.log_level = "{{ log_level }}"

loader.argv = ["sqlite3", "/db/test.db"]

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"
loader.env.PATH = "{{ execdir }}"
# Set HOME to suppress "warning: cannot find home directory; cannot read ~/.sqliterc"
loader.env.HOME = "/"

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "{{ execdir }}/sqlite3", uri = "file:{{ execdir }}/sqlite3" },

  # SQLite creates several helper files for the DB, so we specify a path instead of a single file
  { type = "encrypted", path = "/db/", uri = "file:db/",
    key_name = {% if sgx %} "_sgx_mrenclave" {% else %} "default" {% endif %} },
]

# Unfortunately, non-SGX Gramine cannot use "_sgx_mrenclave" special key, so specify a dummy key
{% if not sgx %}
fs.insecure__keys.default = "ffeeddccbbaa99887766554433221100"
{% endif %}

sgx.debug = true
sgx.enclave_size = "256M"
sgx.thread_num = 4

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ execdir }}/sqlite3",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:scripts/",
]
