diff --git a/library/aes.c b/library/aes.c
index 319d9bb67e89fa7a62ce3f2e14aa1552b7c91a12..2725b7bb8cfc5cd2f593050454a6d2b23866834d 100644
--- a/library/aes.c
+++ b/library/aes.c
@@ -543,6 +543,8 @@ int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
 #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
     if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
         return( mbedtls_aesni_setkey_enc( (unsigned char *) RK, key, keybits ) );
+    else
+        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );
 #endif
 
     for( i = 0; i < ( keybits >> 5 ); i++ )
@@ -654,6 +656,11 @@ int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                            (const unsigned char *) ( cty.buf + cty.rk_offset ), ctx->nr );
         goto exit;
     }
+    else
+    {
+        ret = MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
+        goto exit;
+    }
 #endif
 
     SK = cty.buf + cty.rk_offset + cty.nr * 4;
@@ -947,6 +954,8 @@ int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
 #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
     if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
         return( mbedtls_aesni_crypt_ecb( ctx, mode, input, output ) );
+    else
+        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );
 #endif
 
 #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)
