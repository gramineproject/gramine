#!/usr/bin/env bash
# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (C) 2014 Stony Brook University
# Copyright (C) 2019 Invisible Things Lab
# Copyright (C) 2021 Intel Corporation
#                    Micha≈Ç Kowalczyk <mkow@invisiblethingslab.com>
#                    Wojtek Porczyk <woju@invisiblethingslab.com>

PAL_CMD=@PAL_CMD@
LIBPAL_PATH=@LIBPAL_PATH@
HOST_PAL_PATH=@HOST_PAL_PATH@
SGX=@SGX@

ENV_CONFIG_ID="${SGX_CONFIG_ID:-}"
ENV_CONFIG_SVN="${SGX_CONFIG_SVN:-}"

CONFIG_ID=""
CONFIG_SVN=""

APPLICATION=
ENVS=()
PREFIX=()

if [ "$GDB" == "1" ]; then
    PREFIX=("gdb" "-q")
    if [ -n "$INSIDE_EMACS" ]; then
        PREFIX+=("-i=mi")
    fi
    if [ 0"$SGX" -gt 0 ]; then
        PREFIX+=("-x" "$HOST_PAL_PATH/gdb_integration/gramine_sgx_gdb.py")
        ENVS+=("LD_PRELOAD=$HOST_PAL_PATH/gdb_integration/sgx_gdb.so:$LD_PRELOAD")
    else
        PREFIX+=("-x" "$HOST_PAL_PATH/gdb_integration/gramine_linux_gdb.py")
    fi
    if [ "$GDB_SCRIPT" != "" ]; then
        # Run a script in batch mode, and without TTY (so that it can be piped, redirected etc.)
        PREFIX+=("-x" "$GDB_SCRIPT" "-batch" "-tty=/dev/null")
    fi
    PREFIX+=("--args")
fi

if [ "$PERF" == "1" ]; then
    PREFIX=(perf stat)
fi

if [ "$1" == "--version" ]; then
    echo "Gramine @VERSION@ (@VCS_TAG@)"
    exit 0
fi

while [ "$1" != "" ];
do
    case "$1" in
        --config-id=*)
            CONFIG_ID="${1#*=}"
            if [ -z "$CONFIG_ID" ]; then
                echo "Error: --config-id requires a non-empty value." >&2
                exit 2
            fi
            shift
            continue
            ;;
        --config-svn=*)
            CONFIG_SVN="${1#*=}"
            if [ -z "$CONFIG_SVN" ]; then
                echo "Error: --config-svn requires a non-empty value." >&2
                exit 2
            fi
            shift
            continue
            ;;
        *)
            if [ -z "$APPLICATION" ]; then
                APPLICATION="$1"
                shift
                continue
            fi
            break
            ;;
    esac
done

if [ "$SGX" != "1" ]; then
    if [ -n "$CONFIG_ID" ] || [ -n "$CONFIG_SVN" ]; then
        echo "Error: --config-id and --config-svn are only allowed in gramine-sgx." >&2
        exit 2
    fi
fi

if [ -n "$CONFIG_ID" ]; then
    if [ -n "$ENV_CONFIG_ID" ] && [ "$CONFIG_ID" != "$ENV_CONFIG_ID" ]; then
        echo "Error: --config-id does not match SGX_CONFIG_ID environment variable." >&2
        exit 2
    fi
else
    CONFIG_ID="$ENV_CONFIG_ID"
fi

if [ -n "$CONFIG_SVN" ]; then
    if [ -n "$ENV_CONFIG_SVN" ] && [ "$CONFIG_SVN" != "$ENV_CONFIG_SVN" ]; then
        echo "Error: --config-svn does not match SGX_CONFIG_SVN environment variable." >&2
        exit 2
    fi
else
    CONFIG_SVN="$ENV_CONFIG_SVN"
fi

if [ "$APPLICATION" == "" ]; then
    echo "Usage: $0 [<application>] <args>..."
    exit 2
fi

if [ "$SGX" == "1" ] && [ ! -e "$APPLICATION.manifest.sgx" ]; then
    echo "Invalid application path specified ($APPLICATION.manifest.sgx does not exist)." >&2
    echo "The path should point to application configuration files, so that they can be" >&2
    echo "found after appending corresponding extensions." >&2
    exit 2
fi

if [ ! "$SGX" == "1" ] && [ ! -e "$APPLICATION.manifest" ]; then
    echo "Invalid application path specified ($APPLICATION.manifest does not exist)." >&2
    echo "The path should point to application configuration files, so that they can be" >&2
    echo "found after appending corresponding extensions." >&2
    exit 2
fi

if [ ! -f "$PAL_CMD" ]; then
    echo "$PAL_CMD not found"
    exit 1
fi


CMD=("${ENVS[@]}")
CMD+=("${PREFIX[@]}")
CMD+=("$PAL_CMD" "$LIBPAL_PATH" init "$APPLICATION")

if [ "$SGX" == "1" ]; then
    if [ -z "$CONFIG_ID" ]; then
        CONFIG_ID="00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    fi
    if [ -z "$CONFIG_SVN" ]; then
        CONFIG_SVN="0"
    fi
    CMD+=("$CONFIG_ID" "$CONFIG_SVN")
fi

CMD+=("$@")

exec env "${CMD[@]}"