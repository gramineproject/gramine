node('whatnots') {
    checkout scm

    env.SGX = '1'
    env.IS_VM = '1'

    load '.ci/lib/config-docker.jenkinsfile'

    if (fileExists('/dev/kvm')) {
        env.DOCKER_ARGS_COMMON += ' --device=/dev/kvm:/dev/kvm'
    }

    // Overwrite Gramine-specific seccomp policy because it conflicts with KVM requirements, see
    // https://github.com/moby/moby/issues/42963 for details.
    // FIXME: remove this line once seccomp policy is updated in core Gramine repo.
    env.DOCKER_ARGS_COMMON += ' --security-opt seccomp=unconfined'

    // Required by `make` of gramine-device-testing-module because
    // `/usr/src/linux-headers-.../scripts` is a symlink to smth like `../../lib/linux-kbuild-...`
    // FIXME: either move to Ubuntu 22.04 (which seems to not require this hack) or ditch Docker
    env.DOCKER_ARGS_COMMON += ' --volume=/usr/lib/linux-kbuild-5.18:/usr/lib/linux-kbuild-5.18:ro'

    // only root and `kvm` group can access /dev/kvm, so add `kvm` GID to the in-Docker user
    kvm_gid = sh(returnStdout: true, script: 'getent group kvm | cut -d: -f3').trim()
    env.DOCKER_ARGS_COMMON += ' --group-add ' + kvm_gid

    // only root and `sgx` group can access /dev/sgx_vepc, so add `sgx` GID to the in-Docker user
    sgx_gid = sh(returnStdout: true, script: 'getent group sgx | cut -d: -f3').trim()
    env.DOCKER_ARGS_COMMON += ' --group-add ' + sgx_gid

    docker.build(
        "local:${env.BUILD_TAG}",
        '-f .ci/ubuntu22.04.dockerfile .'
    ).inside("${env.DOCKER_ARGS_COMMON} ${env.DOCKER_ARGS_SGX}") {
        load '.ci/lib/config.jenkinsfile'
        load '.ci/lib/config-release.jenkinsfile'

        load '.ci/lib/stage-lint.jenkinsfile'
        load '.ci/lib/stage-clean-check-prepare.jenkinsfile'
        load '.ci/lib/stage-build-sgx-vm.jenkinsfile'
        load '.ci/lib/stage-test-vm.jenkinsfile'
        load '.ci/lib/stage-clean-check.jenkinsfile'
    }
}
