stage('test-sgx') {
    sh '''
        .ci/check-no-syscall.sh "$GRAMINE_PKGLIBDIR"/runtime/glibc/libc.so.6
        if test -f "$GRAMINE_PKGLIBDIR"/runtime/musl/libc.so
        then
            .ci/check-no-syscall.sh "$GRAMINE_PKGLIBDIR"/runtime/musl/libc.so
        fi
    '''

    if (env.RA_TYPE == null) {
        env.RA_TYPE = 'epid'
    }

    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/helloworld
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/python
            make ${MAKEOPTS} RA_TYPE=$RA_TYPE RA_CLIENT_SPID=${ra_client_spid}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/bash
            make ${MAKEOPTS}
            make ${MAKEOPTS} regression
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/busybox
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/memcached
            make ${MAKEOPTS}
            make SGX=1 start-gramine-server &
            ../../scripts/wait_for_server 60 127.0.0.1 11211
            # memcslap populates server but doesn't report errors, use
            # memcached-tool for this (must return two lines of stats)
            memcslap --servers=127.0.0.1 --concurrency=8
            src/scripts/memcached-tool 127.0.0.1 | wc -l | grep -w "2"
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            # TODO this logic is to check both epoll and select varants, and probably
            # should be split to check both of those separately and on all distros
            if .ci/isdistro xenial
            then
                USE_SELECT=1
                export USE_SELECT
            fi

            cd CI-Examples/redis
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-gramine-server &
            ../../scripts/wait_for_server 60 127.0.0.1 6379
            ./src/src/redis-benchmark
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/lighttpd
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-gramine-server &
            ../../scripts/wait_for_server 60 127.0.0.1 8003
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8003
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/nginx
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-gramine-server &
            ../../scripts/wait_for_server 60 127.0.0.1 8002
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8002
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/rust
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-gramine-server &
            ../../scripts/wait_for_server 60 127.0.0.1 3000
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:3000
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/blender
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/sqlite
            make ${MAKEOPTS} all
            make ${MAKEOPTS} regression
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/ra-tls-mbedtls
            if [ "${RA_TYPE}" = "epid" ]; then \
                if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
                then \
                    make check_epid RA_TYPE=epid RA_CLIENT_SPID=${ra_client_spid} \
                        RA_TLS_EPID_API_KEY=${ra_client_key} RA_CLIENT_LINKABLE=0; \
                    make check_epid_fail RA_TYPE=epid RA_CLIENT_SPID=${ra_client_spid} \
                        RA_TLS_EPID_API_KEY=${ra_client_key} RA_CLIENT_LINKABLE=0; \
                else \
                    echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                    exit 1; \
                fi \
            elif [ "${RA_TYPE}" = "dcap" ]; then \
                make check_dcap RA_TYPE=dcap; \
                make check_dcap_fail RA_TYPE=dcap; \
            else \
                echo "Invalid RA_TYPE env variable: ${RA_TYPE}"; \
                exit 1; \
            fi
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd CI-Examples/ra-tls-secret-prov
            if [ "${RA_TYPE}" = "epid" ]; then \
                if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
                then \
                    make check_epid RA_TYPE=epid RA_CLIENT_SPID=${ra_client_spid} \
                        RA_TLS_EPID_API_KEY=${ra_client_key} RA_CLIENT_LINKABLE=0; \
                else \
                    echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                    exit 1; \
                fi \
            elif [ "${RA_TYPE}" = "dcap" ]; then \
                make check_dcap RA_TYPE=dcap; \
            else \
                echo "Invalid RA_TYPE env variable: ${RA_TYPE}"; \
                exit 1; \
            fi
        '''
    }
}
