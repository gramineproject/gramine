stage('build') {
    sh '''
        echo "========= $PATH ==========="
        # we add `/sbin` to PATH to find the `modprobe` program
        export PATH="/sbin:$PATH"

        git clone https://github.com/gramineproject/device-testing-tools.git
        cd device-testing-tools
        git checkout 1ae1b01cd3da079fe0567c23f2a3f3d25bc21cd9 # TODO: use `master` after PR merged

        cd initramfs_builder
        {
           echo '#!/bin/sh'
           echo 'if test -n $SGX; then GRAMINE=gramine-sgx; else GRAMINE=gramine-direct; fi'
           echo 'cd $PWD_FOR_VM'
           echo '( cd device-testing-tools/gramine-device-testing-module; insmod gramine-testing-dev.ko )'

           # only couple tests -- executing in a VM with virtio-9p-pci FS passthrough is very slow
           echo 'cd libos/test/regression'
           echo 'gramine-test build helloworld; $GRAMINE helloworld'
           echo 'gramine-test build device_ioctl; $GRAMINE device_ioctl'
           echo 'poweroff -n -f'
        } > new_init
        make ${MAKEOPTS}

        cd ../gramine-device-testing-module
        make ${MAKEOPTS}
    '''

    sh '''
        mkdir -p driver/asm
        cd driver/asm
        wget --timeout=10 -O sgx.h \
          https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/plain/arch/x86/include/uapi/asm/sgx.h?h=v5.11
        sha256sum sgx.h | grep -q a34a997ade42b61376b1c5d3d50f839fd28f2253fa047cb9c0e68a1b00477956
    '''

    env.MESON_OPTIONS = ''
    if (env.UBSAN == '1') {
        env.MESON_OPTIONS += ' -Dubsan=enabled'
    }
    if (env.ASAN == '1') {
        env.MESON_OPTIONS += ' -Dasan=enabled'
    }
    if (env.CC == 'clang') {
        env.MESON_OPTIONS += ' -Dmusl=disabled'
    }

    try {
        // copy gramine_test_dev_ioctl.h device header for `device_ioctl` LibOS test
        sh '''
            cp -f device-testing-tools/gramine-device-testing-module/gramine_test_dev_ioctl.h \
                libos/test/regression/
        '''

        sh '''
            meson setup build/ \
                --werror \
                --prefix="$PREFIX" \
                --buildtype="$BUILDTYPE" \
                -Ddirect=disabled \
                -Dsgx=enabled \
                -Dtests=enabled \
                -Dsgx_driver_include_path="$PWD/driver" \
                $MESON_OPTIONS
            ninja -vC build/
        '''

        // install
        sh '''
            ninja -vC build/ install
            gramine-sgx-gen-private-key
        '''
    } finally {
        archiveArtifacts 'build/meson-logs/**/*'
        archiveArtifacts 'build/subprojects/glibc-*/glibc-build.log'
    }

    // archive all installed files
    // NOTE we can't use ${env.PREFIX} here, because path needs to be relative to workdir
    archiveArtifacts "usr/**/*"

    // Absolute path to libdir, as configured by Meson.
    // For our current builds this should be "$WORKSPACE/usr/lib/x86_64-linux-gnu":
    // --prefix is set from $PREFIX above (see config-docker.jenkinsfile) and should be "$WORKSPACE/usr";
    // --libdir is distro-dependent, but on Debian and derivatives it's "lib/x86_64-linux-gnu"
    libdir = sh(returnStdout: true, script: '''
        meson introspect build/ --buildoptions \
        | jq -r '(map(select(.name == "prefix")) + map(select(.name == "libdir"))) | map(.value) | join("/")'
    ''').trim()

    env.GRAMINE_PKGLIBDIR = libdir + '/gramine'

    // In CI we install to non-standard --prefix (see above). This makes sure the libraries are
    // available anyway (e.g. gramine-sgx-pf-crypt needs libsgx_util.so).
    env.PKG_CONFIG_PATH = libdir + '/pkgconfig'

    // prevent cheating and testing from repo
    sh 'rm -rf build'
    sh 'git clean -Xf subprojects'
}
